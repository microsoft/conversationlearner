const selectors = {
    common: {
        spinner: '.cl-spinner',
        dropDownOptions: 'button.ms-Dropdown-item',
        gridRow: '[data-automationid="DetailsRowFields"]',
    },
    helpPanel: {
        buttonClose: '[data-testid="helppanel-close-button"]',
    },
    homePage: {
        link: '#uiLink',
    },
    app: {
        container: '.cl-o-app-columns'
    },
    officePicker: {
        buttonSuggestion: '.ms-Suggestions-itemButton',
        suggestions: '.ms-Suggestions',
        tagItem: '.ms-TagItem',
        tagItemClose: '.ms-TagItem-close',
        splitButton: '[data-automationid="splitbuttonprimary"]',
    },
    models: {
        buttonCreate: '[data-testid=model-list-create-new-button]',
        buttonImport: '[data-testid=model-list-import-model-button]',
        buttonLocalFile: '[data-testid="model-creator-locate-file-button"]',
        name: '[data-testid=model-creator-input-name]',
        submit: '[data-testid=model-creator-submit-button]',
        inputFile: '[data-testid="model-creator-import-file-picker"] input[type="file"]',
    },
    model: {
        name: '[data-testid="app-index-model-name"]',
        buttonNavActions: '[data-testid="app-index-nav-link-actions"]',
        buttonNavEntities: '[data-testid="app-index-nav-link-entities"]',
        buttonNavTrainDialogs: '[data-testid=app-index-nav-link-train-dialogs]',
        buttonNavLogDialogs: '[data-testid="app-index-nav-link-log-dialogs"]',
        buttonNavSettings: '[data-testid="app-index-nav-link-settings"]',
    },
    trainingStatus: {
        completed: '[data-testid="training-status-completed"]',
        running: '[data-testid="training-status-running"]',
    },
    entities: {
        buttonCreate: '[data-testid="entities-button-create"]',
        name: '[data-testid="entities-name"]',
    },
    entity: {
        checkboxResolutionRequired: '[data-testid="entity-creator-resolution-required"] .ms-Checkbox',
        dropDownResolverType: '[data-testid="entity-creator-resolver-type-dropdown"]',
        dropDownType: '[data-testid="entity-creator-entity-type-dropdown"]',
        modal: '[data-testid="entity-creator-modal"]',
        name: '[data-testid="entity-creator-entity-name-text"]',
        enumValue: '[data-testid="entity-enum-value"]',
        enumValueName: '[data-testid="entity-enum-value-value-name"][value=""]',
        enumValueButtonDelete: '[data-testid="entity-enum-value-button-delete"]',
        existingConditions: '[data-testid="entity-creator-existing-conditions"]',
        existingCondition: (index: number) => `[data-testid="entity-creator-existing-condition-${index}"]`,
        buttonDelete: '[data-testid="entity-button-delete"]',
        buttonCancel: '[data-testid="entity-button-cancel"]',
        buttonSave: '[data-testid="entity-creator-button-save"]',
        buttonUseCondition: (index: number) => `[data-testid="entity-creator-button-use-condition-${index}"]`,
    },
    actions: {
        cells: {
            response: '[data-automation-key="actionResponse"]',
        },
        buttonNewAction: '[data-testid="actions-button-create"]',
        setEntityResponseText: '[data-testid="actions-list-set-entity"]',
        textResponse: '[data-testid="action-scorer-text-response"]',
        callbackName: '[data-testid="action-scorer-api-name"]',
        requiredConditions: '[data-testid="action-details-required-entities"]',
        iconError: '[data-testid="actions-error"]',
    },
    action: {
        mockResult: {
            name: '[data-testid="action-callback-result-name"]',
            row: '[data-testid*="action-callback-result-row"]',
            codeRow: '[data-testid*="action-callback-result-row-from-code"]',
            modelRow: '[data-testid*="action-callback-result-row-from-model"]',
            buttons: {
                view: '[data-testid="action-callback-result-button-view"]',
                add: '[data-testid="action-creator-button-mock-result-add"]',
                delete: '[data-testid="action-callback-result-button-delete"]',
            },
            iconError: '[data-testid="action-callback-result-icon-error"]',
        },
        dropDownType: '[data-testid="dropdown-action-type"]',
        dropDownEntity: '[data-testid="action-set-entity"]',
        dropDownEnum: '[data-testid="action-set-enum"]',
        dropDownApiCallback: '[data-testid="dropdown-api-option"]',
        dropDownCardTemplate: '[data-testid="action-card-template"]',
        buttonCreate: '[data-testid="action-creator-create-button"]',
        buttonCreateEntity: '[data-testid="action-button-create-entity"]',
        buttonCancel: '[data-testid="action-creator-cancel-button"]',
        buttonDelete: '[data-testid="action-creator-delete-button"]',
        buttonAddCondition: '[data-testid="action-creator-modal-button-add-condition"]',
        helpIconCallbackResult: '[data-testid="action-help-panel-callback-result"]',
        inputResponse: '[data-testid="action-text-response"] [contenteditable="true"]',
        inputRequiredConditions: '[data-testid="action-required-entities"] input',
        inputDisqualifiedConditions: '[data-testid="action-disqualifying-entities"] input',
        inputExpectedEntity: '[data-testid="action-expected-entity"] input',
        inputCustomCallbackName: '[data-testid="callback-result-modal-input-custom-callback-name"]',
        tagPickerRequired: '[data-testid="action-required-entities"]',
        tagPickerExpected: '[data-testid="action-expected-entity"]',
        tagPickerDisqualified: '[data-testid="action-disqualifying-entities"]',
        tag: '[data-testid="tag-item"]',
        title: '[data-testid="create-an-action-title"]',
        setEntityWarning: '[data-testid="action-set-entity-warning"]',
        nonRemovableTags: '[data-testid="picker-tag-nonRemovable"]',
        checkBoxWaitForResponse: '[data-testid="action-creator-wait-checkbox"] .ms-Checkbox',
        warningNoWaitExpected: '[data-testid="action-warning-nowait-expected"]',
        logicArg: (argName: string) => `[data-testid="action-logic-argument-${argName}"] [contenteditable="true"]`,
        renderArg: (argName: string) => `[data-testid="action-render-argument-${argName}"] [contenteditable="true"]`,
        cardArg: (argName: string) => `[data-testid="action-card-argument-${argName}"] [contenteditable="true"]`,
    },
    actionDeleteModal: {
        deleteTypeA: '[data-testid="action-delete-type"] [data-testid="action-modal-delete-type-a"]',
        deleteTypeB: '[data-testid="action-delete-type"] [data-testid="action-modal-delete-type-b"]',
        buttonConfirm: '[data-testid="action-delete-confirm"]',
        buttonCancel: '[data-testid="confirm-cancel-modal-cancel"]',
    },
    addConditionModal: {
        modal: '[data-testid="condition-creator-modal-title"]',
        warning: '[data-testid="condition-creator-modal-warning"]',
        buttonCreate: '[data-testid="condition-creator-button-create"]',
        buttonCancel: '[data-testid="condition-creator-button-cancel"]',
        buttonUseCondition: '[data-testid="condition-creator-modal-button-use-condition"]',
        dropdownEntity: '[data-testid="condition-creator-modal-dropdown-entity"]',
        dropdownOperator: '[data-testid="condition-creator-modal-dropdown-operator"]',
        dropdownEnumValue: '[data-testid="condition-creator-modal-dropdown-enumvalue"]',
        inputNumberValue: '[data-testid="condition-creator-modal-dropdown-numbervalue"] input',
        existingConditions: '[data-testid="condition-creator-existing-conditions"]',
        existingCondition: '[data-testid="condition-creator-modal-existing-condition"]',
        existingConditionMatch: '[data-testid="condition-creator-modal-existing-condition-match"]',
    },
    callbackResultModal: {
        title: '[data-testid="callback-result-modal-title"]',
        entityName: `[data-testid="callback-result-modal-entity-name"]`,
        entityNameError: `[data-testid="callback-result-modal-entity-name-error"]`,
        entityValueError: `[data-testid="callback-result-modal-entity-value-error"]`,
        valuesList: `[data-testid="callback-result-modal-entity-values-list"]`,
        value: `[data-testid="callback-result-modal-input-entity-value"]`,
        code: '[data-testid="callback-result-modal__code"]',
        toggleView: '[data-testid="callback-result-modal-toggle-view"]',
        inputs: {
            name: '[data-testid="callback-result-modal-input-name"]',
            entityValue: `[data-testid="callback-result-modal-input-entity-value"]`,
            returnValue: '[data-testid="callback-result-modal-return-value"]',
        },
        buttons: {
            addEntity: '[data-testid="callback-result-modal-button-add-entity"]',
            addValue: `[data-testid="callback-result-modal-button-add-value"]`,
            removeValue: `[data-testid="callback-result-modal-button-delete-value"]`,
            clear: '[data-testid="callback-result-modal-button-clear"]',
            submit: '[data-testid="callback-result-modal-button-ok"]',
            cancel: '[data-testid="callback-result-modal-button-cancel"]',
        },
        dropdownEntity: '[data-testid="callback-result-modal-dropdown-entity"]',
    },
    confirmCancelModal: {
        buttonCancel: '[data-testid="confirm-cancel-modal-cancel"]',
        buttonConfirm: '[data-testid="confirm-cancel-modal-accept"]',
        buttonOk: '[data-testid="confirm-cancel-modal-ok"]',
    },
    trainDialogs: {
        validityIndicator: '[data-testid="train-dialogs-validity-indicator"]',
        descriptions: '[data-testid="train-dialogs-description"]',
        tags: '[data-testid="train-dialogs-tags"] .cl-tags-readonly__tag',
        buttonNew: '[data-testid="button-new-train-dialog"]',
    },
    trainDialog: {
        memory: {
            entityName: '[data-testid="entity-memory-name"]',
            entityValue: '[data-automation-key="entityValues"]',
        },
        inputWebChat: 'input[placeholder="Type your message..."]',
        buttonScoreActions: '[data-testid="score-actions-button"]',
        buttonAbandon: '[data-testid="edit-dialog-modal-abandon-delete-button"]',
        // TODO: Shouldn't have different test ids for enabled / disabled
        buttonSelectAction: '[data-testid="action-scorer-button-clickable"]',
        buttonSelectActionDisabled: '[data-testid="action-scorer-button-no-click"]',
        buttonSave: '[data-testid="edit-teach-dialog-close-save-button"]',
        actionScorerSetEntityActions: '[data-testid="action-scorer-action-set-entity"]',
        actionScorerTextActions: '[data-testid="action-scorer-text-response"]',
        actionScorer: {
            callbackResultSelectorDropdown: '[data-testid="action-callback-result-selector-dropdown"]',
            callbackResultSelectorButton: '[data-testid="action-callback-result-selector-button"]',
            callbackName: '[data-testid="action-scorer-api-name"]',
            enumActions: '[data-testid="action-scorer-action-set-entity"]',
            rowField: '[data-automationid="DetailsRowFields"]',
            buttonCreate: '[data-testid="action-scorer-add-action-button"]',
            buttonSelected: '[data-testid="action-scorer-button-selected"]',
            condition: '[data-testid="action-scorer-entities"]',
        },
    },
    mergeModal: {
        title: '[data-testid="merge-modal-title"]',
        buttonMerge: '[data-testid="merge-modal-merge-button"]',
        buttonSaveAsIs: '[data-testid="merge-modal-save-as-is-button"]',
    },
    addInputModal: {
        branchInput: '[data-testid="user-input-modal-new-message-input"]',
    },
    dialogModal: {
        title: '[data-testid="traindialog-title"]',
        container: '.cl-modal',
        branchButton: '[data-testid="edit-dialog-modal-branch-button"]',
        branchSubmit: '[data-testid="app-create-button-submit"]',
        buttonCloseSave: '[data-testid="edit-teach-dialog-close-save-button"]',
        buttonScoreActionsButton: '[data-testid="score-actions-button"]',
        buttonSaveAsTrainDialog: '[data-testid="footer-button-done"]',
        buttonAddTag: '[data-testid="train-dialog-tags"] .cl-tags__button-add',
        inputDescription: '[data-testid="train-dialog-description"]',
        inputTag: '[data-testid="train-dialog-tags"] .cl-tags__form input',
        tags: '[data-testid="train-dialog-tags"] .cl-tags__tag span',
        tagsControl: '[data-testid="train-dialog-tags"]',
        webChatUtterances: 'div[data-testid="web-chat-utterances"] > div.wc-message-content > div > div.format-markdown > p',
        entityConflictModal: {
            modal: '[data-testid="extract-conflict-modal-conflicting-labels"]',
            attempted: '[data-testid="extract-conflict-modal-attempted"]',
            buttonAccept: '[data-testid="entity-conflict-accept"]',
            buttonCancel: '[data-testid="entity-conflict-cancel"]',
        },
        error: '[data-testid="dialog-modal-error-noselection"]',
        warning: '[data-testid="dialog-modal-warning"]',
    },
    logDialogs: {
        buttonCreate: '[data-testid="log-dialogs-new-button"]',
        description: '[data-testid="log-dialogs-description"]',
    },
    logDialog: {
        buttonDone: '[data-testid="chat-session-modal-done-testing-button"]',
        inputMessage: 'input[placeholder="Type your message..."]',
        modal: '.cl-modal--log',
    },
    logConversionConflictsModal: {
        modal: '[data-testid="log-conversion-conflicts-modal"]',
        conflictButtons: '[data-testid^="log-conversion-conflicts-conflict"]',
        conflict1: '[data-testid="log-conversion-conflicts-conflict-1"]',
        conflict2: '[data-testid="log-conversion-conflicts-conflict-2"]',
        buttonNext: '[data-testid="log-conversion-conflicts-modal-next"]',
        buttonPrevious: '[data-testid="log-conversion-conflicts-modal-previous"]',
        buttonAbort: '[data-testid="log-conversion-conflicts-modal-cancel"]',
        buttonAccept: '[data-testid="log-conversion-conflicts-modal-accept"]',
    },
    chatModal: {
        container: '.cl-sessionmodal',
        buttonDone: '[data-testid="chat-session-modal-done-testing-button"]',
    },
    extractionEditor: {
        inputAlternateText: '[data-testid="entity-extractor-alternative-input-text"]',
        overlay: '.entity-labeler-overlay',
        customButton: '[data-testid="custom-entity-name-button"]',
        customNode: '.cl-entity-node--custom',
        nodeIndicator: '.cl-entity-node-indicator',
        buttonRemoveLabel: '[data-testid="entity-extractor-button-remove-label"]',
        buttonSubmitChanges: '[data-testid="submit-changes-button"]',
        buttonCreate: '[data-testid="entity-extractor-create-button"]',
        slateEditor: '[data-slate-editor="true"]',
        tokenNode: '[data-testid="token-node-entity-value"]',
    },
    entityPicker: {
        inputSearch: '[data-testid="entity-picker-entity-search"]',
        buttonNew: '[data-testid="entity-picker-button-new"]',
        options: '.custom-toolbar .custom-toolbar__results .custom-toolbar__result',
    },
    webChat: {
        callbackResultName: '[data-testid="webchat-action-callback-result-name"]',
        messageFromBot: '.wc-message-from-bot',
        messageFromBotException: '.wc-border-error-from-bot',
        messageFromMe: '.wc-message-from-me',
        messageFromMeException: '.wc-border-error-from-me',
        messageColorException: '.wc-message-color-exception',
        messageDownArrow: '.wc-message-downarrow',
        activities: '[data-testid="web-chat-utterances"]',
        buttonAddAction: '[data-testid="chat-edit-add-bot-response-button"]',
        buttonAddInput: '[data-testid="chat-edit-add-user-input-button"]',
        buttonBranch: '[data-testid="edit-dialog-modal-branch-button"]',
        buttonDeleteActivity: '[data-testid="chat-edit-delete-turn-button"]',
    },
    settings: {
        buttonNewVersion: '[data-testid="settings-button-new-version"]',
        buttonSave: '[data-testid="settings-button-save"]',
        buttonDiscard: '[data-testid="settings-button-discard"]',
        inputModelName: '[data-testid="settings-input-model-name"]',
    },
    packageCreatorModal: {
        modal: '[data-testid="package-creator-modal"]',
        inputVersionName: '[data-testid="package-creator-input-version-name"]',
        buttonCreate: '[data-testid="package-creator-button-create"]',
        buttonCancel: '[data-testid="package-creator-button-cancel"]',
    },
    payloadEditor: {
        mentionNodeCompleted: '.mention-node--completed',
    }
}

export default selectors